// Ch·ªù DOM ƒë∆∞·ª£c t·∫£i ho√†n to√†n tr∆∞·ªõc khi ch·∫°y script
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîç DOM loaded, checking Leaflet...');
    console.log('üîç Leaflet available:', typeof L !== 'undefined');
    
    // ƒê·ª£i navigation manager kh·ªüi t·∫°o xong r·ªìi m·ªõi init map
    setTimeout(() => {
        initializeMap();
    }, 400); // TƒÉng delay ƒë·ªÉ navigation.js ho√†n to√†n setup xong
});

/**
 * Kh·ªüi t·∫°o b·∫£n ƒë·ªì Leaflet, th√™m c√°c l·ªõp v√† marker.
 */
function initializeMap() {
    const mapContainer = document.getElementById('map');
    if (!mapContainer) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ div v·ªõi id="map".');
        return;
    }
    
    console.log('üîç Map container found:', mapContainer);

    // Ki·ªÉm tra xem b·∫£n ƒë·ªì ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a ƒë·ªÉ tr√°nh l·ªói
    if (mapContainer._leaflet_id) {
        console.log('‚ö†Ô∏è Map ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o r·ªìi, b·ªè qua');
        return;
    }

    try {
        if (typeof L === 'undefined') {
            throw new Error('Th∆∞ vi·ªán Leaflet.js ch∆∞a ƒë∆∞·ª£c t·∫£i.');
        }
        
        console.log('üó∫Ô∏è Creating Leaflet map...');

        // 1. Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng b·∫£n ƒë·ªì
        const map = L.map('map', {
            zoomControl: false, // T·∫Øt n√∫t zoom
            attributionControl: false, // T·∫Øt attribution m·∫∑c ƒë·ªãnh ƒë·ªÉ th√™m sau
        }).setView([10.7769, 106.7009], 13); // T·ªça ƒë·ªô TP.HCM
        
        console.log('‚úÖ Map object created');

        // 2. *** S·ª¨A L·ªñI QUAN TR·ªåNG ***
        // Bu·ªôc Leaflet t√≠nh to√°n l·∫°i k√≠ch th∆∞·ªõc c·ªßa n√≥.
        // ƒêi·ªÅu n√†y kh·∫Øc ph·ª•c s·ª± c·ªë b·∫£n ƒë·ªì kh√¥ng hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß.
        map.invalidateSize();
        console.log('‚úÖ Map size invalidated');

        // 3. Th√™m l·ªõp Tile Layer (n·ªÅn b·∫£n ƒë·ªì)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        console.log('‚úÖ Tile layer added');

        // 3.5. Th√™m ch·ª©c nƒÉng ƒë·ªãnh v·ªã ng∆∞·ªùi d√πng
        addUserLocation(map);

        // 4. Th√™m c√°c Marker t√πy ch·ªânh
        addCustomMarkers(map);
        console.log('‚úÖ Custom markers added');

        // 5. C·∫≠p nh·∫≠t theme cho b·∫£n ƒë·ªì d·ª±a tr√™n c√†i ƒë·∫∑t c·ªßa trang
        updateMapTheme();
        document.addEventListener('themeChanged', updateMapTheme);
        
        // Force resize after everything loads (similar to debug version)
        setTimeout(() => {
            map.invalidateSize();
            console.log('‚úÖ Final map resize completed');
        }, 100);

        console.log('‚úÖ B·∫£n ƒë·ªì ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.');

    } catch (error) {
        console.error('‚ùå ƒê√£ x·∫£y ra l·ªói khi kh·ªüi t·∫°o b·∫£n ƒë·ªì:', error);
    }
}

/**
 * Th√™m ch·ª©c nƒÉng ƒë·ªãnh v·ªã ng∆∞·ªùi d√πng.
 * @param {L.Map} map - ƒê·ªëi t∆∞·ª£ng b·∫£n ƒë·ªì Leaflet.
 */
function addUserLocation(map) {
    if ('geolocation' in navigator) {
        console.log('üåç Requesting user location...');
        
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                const accuracy = position.coords.accuracy;
                
                console.log(`‚úÖ User location found: ${lat}, ${lng} (accuracy: ${accuracy}m)`);
                
                // T·∫°o icon ng∆∞·ªùi d√πng
                const userIcon = L.divIcon({
                    className: 'user-location-marker',
                    html: `<div class="user-location-icon">
                               <div class="user-dot"></div>
                               <div class="user-pulse"></div>
                           </div>`,
                    iconSize: [24, 24],
                    iconAnchor: [12, 12]
                });
                
                // Th√™m marker v·ªã tr√≠ ng∆∞·ªùi d√πng
                const userMarker = L.marker([lat, lng], { icon: userIcon })
                    .addTo(map)
                    .bindPopup(`<b>V·ªã tr√≠ c·ªßa b·∫°n</b><br>ƒê·ªô ch√≠nh x√°c: ~${Math.round(accuracy)}m`);
                
                // Di chuy·ªÉn map ƒë·∫øn v·ªã tr√≠ ng∆∞·ªùi d√πng
                map.setView([lat, lng], 15);
                
                console.log('‚úÖ User location marker added');
            },
            function(error) {
                console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ ng∆∞·ªùi d√πng:', error.message);
                
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        console.log('User denied location permission');
                        break;
                    case error.POSITION_UNAVAILABLE:
                        console.log('Location information unavailable');
                        break;
                    case error.TIMEOUT:
                        console.log('Location request timed out');
                        break;
                }
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 300000 // 5 minutes
            }
        );
    } else {
        console.warn('‚ö†Ô∏è Geolocation is not supported by this browser');
    }
}

/**
 * Th√™m c√°c marker t√πy ch·ªânh v√†o b·∫£n ƒë·ªì.
 * @param {L.Map} map - ƒê·ªëi t∆∞·ª£ng b·∫£n ƒë·ªì Leaflet.
 */
function addCustomMarkers(map) {
    // Marker cho "An Nguy·ªÖn"
    const avatarIconA = L.divIcon({
        className: 'custom-marker-icon',
        html: `<div class="avatar-marker-container">
                   <img src="https://placehold.co/48x48/93C5FD/1E3A8A?text=A" alt="Avatar A" class="w-12 h-12 rounded-full border-4 border-slate-800 shadow-lg">
               </div>`,
        iconSize: [48, 48],
        iconAnchor: [24, 48] // Neo v√†o ƒëi·ªÉm d∆∞·ªõi c√πng c·ªßa marker
    });
    L.marker([10.785, 106.702], { icon: avatarIconA }).addTo(map).bindPopup("<b>An Nguy·ªÖn</b><br>ƒêang ·ªü g·∫ßn ƒë√¢y.");

    // Marker cho "B√¨nh Tr·∫ßn"
    const avatarIconB = L.divIcon({
        className: 'custom-marker-icon',
        html: `<div class="avatar-marker-container">
                   <img src="https://placehold.co/48x48/A7F3D0/059669?text=B" alt="Avatar B" class="w-12 h-12 rounded-full border-4 border-slate-800 shadow-lg">
                </div>`,
        iconSize: [48, 48],
        iconAnchor: [24, 48]
    });
    L.marker([10.77, 106.695], { icon: avatarIconB }).addTo(map).bindPopup("<b>B√¨nh Tr·∫ßn</b><br>ƒêang ·ªü Qu·∫≠n 1.");

    // Marker ch·∫•m ƒë∆°n gi·∫£n
    const dotIcon = L.divIcon({
        className: 'custom-marker-icon',
        html: `<div class="simple-dot-marker"></div>`,
        iconSize: [20, 20],
        iconAnchor: [10, 10]
    });
    L.marker([10.778, 106.715], { icon: dotIcon }).addTo(map).bindPopup("M·ªôt ƒë·ªãa ƒëi·ªÉm th√∫ v·ªã.");
}

/**
 * C·∫≠p nh·∫≠t theme (s√°ng/t·ªëi) cho l·ªõp b·∫£n ƒë·ªì.
 */
function updateMapTheme() {
    const mapContainer = document.getElementById('map');
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
    if (mapContainer) {
        mapContainer.setAttribute('data-theme', currentTheme);
        console.log(`üé® Theme b·∫£n ƒë·ªì ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${currentTheme}`);
    }
}
