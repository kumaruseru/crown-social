const RSSService = require('./RSSService');
const Article = require('../models/Article');

class NewsService {
    constructor() {
        this.rssService = new RSSService();
        this.syncInterval = null;
        this.isRunning = false;
    }

    // Kh·ªüi ƒë·ªông service ƒë·ªìng b·ªô tin t·ª©c
    async startNewsSync() {
        if (this.isRunning) {
            console.log('üì∞ News sync ƒë√£ ƒëang ch·∫°y');
            return;
        }

        console.log('üöÄ Kh·ªüi ƒë·ªông News Sync Service...');
        this.isRunning = true;

        // ƒê·ªìng b·ªô ngay l·∫≠p t·ª©c
        await this.syncAllNews();

        // Thi·∫øt l·∫≠p ƒë·ªìng b·ªô ƒë·ªãnh k·ª≥ m·ªói 30 ph√∫t
        this.syncInterval = setInterval(async () => {
            await this.syncAllNews();
        }, 30 * 60 * 1000);

        console.log('‚úÖ News Sync Service ƒë√£ kh·ªüi ƒë·ªông');
    }

    // D·ª´ng service ƒë·ªìng b·ªô
    stopNewsSync() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
        this.isRunning = false;
        console.log('‚èπÔ∏è News Sync Service ƒë√£ d·ª´ng');
    }

    // ƒê·ªìng b·ªô t·∫•t c·∫£ tin t·ª©c
    async syncAllNews() {
        try {
            console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô tin t·ª©c t·ª´ t·∫•t c·∫£ ngu·ªìn RSS...');
            const startTime = Date.now();

            // L·∫•y tin m·ªõi nh·∫•t t·ª´ t·∫•t c·∫£ ngu·ªìn
            const latestNews = await this.rssService.getLatestNews(500);
            
            let newCount = 0;
            let updatedCount = 0;
            let errorCount = 0;

            // X·ª≠ l√Ω t·ª´ng b√†i tin
            for (const newsItem of latestNews) {
                try {
                    const result = await this.saveArticle(newsItem);
                    if (result.isNew) {
                        newCount++;
                    } else {
                        updatedCount++;
                    }
                } catch (error) {
                    errorCount++;
                    console.error(`‚ùå L·ªói khi l∆∞u b√†i "${newsItem.title}":`, error.message);
                }
            }

            const duration = Date.now() - startTime;
            console.log(`‚úÖ Ho√†n th√†nh ƒë·ªìng b·ªô tin t·ª©c:`);
            console.log(`   üìä Th·ªëng k√™: ${newCount} m·ªõi, ${updatedCount} c·∫≠p nh·∫≠t, ${errorCount} l·ªói`);
            console.log(`   ‚è±Ô∏è Th·ªùi gian: ${Math.round(duration / 1000)}s`);

        } catch (error) {
            console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô tin t·ª©c:', error);
        }
    }

    // L∆∞u b√†i vi·∫øt v√†o database
    async saveArticle(newsItem) {
        try {
            // Ki·ªÉm tra xem b√†i ƒë√£ t·ªìn t·∫°i ch∆∞a
            let existingArticle = await Article.findOne({
                $or: [
                    { originalId: newsItem.id },
                    { link: newsItem.link },
                    { 
                        title: newsItem.title,
                        source: newsItem.source 
                    }
                ]
            });

            if (existingArticle) {
                // C·∫≠p nh·∫≠t b√†i vi·∫øt n·∫øu c√≥ thay ƒë·ªïi
                const updated = await this.updateArticleIfChanged(existingArticle, newsItem);
                return { isNew: false, article: existingArticle, updated };
            }

            // T·∫°o b√†i vi·∫øt m·ªõi
            const article = new Article({
                originalId: newsItem.id,
                title: newsItem.title,
                description: newsItem.description,
                content: newsItem.content,
                link: newsItem.link,
                source: newsItem.source,
                category: newsItem.category,
                author: newsItem.author,
                image: newsItem.image,
                tags: newsItem.tags || [],
                publishedAt: new Date(newsItem.pubDate),
                views: 0,
                likes: 0,
                shares: 0,
                isActive: true,
                isFeatured: false
            });

            await article.save();
            return { isNew: true, article };

        } catch (error) {
            console.error('‚ùå L·ªói khi l∆∞u b√†i vi·∫øt:', error);
            throw error;
        }
    }

    // C·∫≠p nh·∫≠t b√†i vi·∫øt n·∫øu c√≥ thay ƒë·ªïi
    async updateArticleIfChanged(existingArticle, newsItem) {
        let hasChanges = false;
        const updates = {};

        // Ki·ªÉm tra c√°c tr∆∞·ªùng c√≥ th·ªÉ thay ƒë·ªïi
        if (existingArticle.title !== newsItem.title) {
            updates.title = newsItem.title;
            hasChanges = true;
        }

        if (existingArticle.description !== newsItem.description) {
            updates.description = newsItem.description;
            hasChanges = true;
        }

        if (existingArticle.content !== newsItem.content) {
            updates.content = newsItem.content;
            hasChanges = true;
        }

        if (existingArticle.image !== newsItem.image && newsItem.image) {
            updates.image = newsItem.image;
            hasChanges = true;
        }

        if (hasChanges) {
            updates.updatedAt = new Date();
            await Article.findByIdAndUpdate(existingArticle._id, updates);
            console.log(`üîÑ C·∫≠p nh·∫≠t b√†i vi·∫øt: ${existingArticle.title}`);
            return true;
        }

        return false;
    }

    // L·∫•y tin t·ª©c theo danh m·ª•c
    async getNewsByCategory(category, page = 1, limit = 20) {
        const skip = (page - 1) * limit;
        
        const articles = await Article.find({ 
            category: category,
            isActive: true 
        })
        .sort({ publishedAt: -1 })
        .skip(skip)
        .limit(limit)
        .select('-content'); // Kh√¥ng l·∫•y content ƒë·∫ßy ƒë·ªß cho danh s√°ch

        const total = await Article.countDocuments({ 
            category: category,
            isActive: true 
        });

        return {
            articles,
            total,
            page,
            totalPages: Math.ceil(total / limit),
            hasNext: page * limit < total,
            hasPrev: page > 1
        };
    }

    // L·∫•y tin t·ª©c m·ªõi nh·∫•t
    async getLatestNews(limit = 20) {
        return await Article.find({ isActive: true })
            .sort({ publishedAt: -1 })
            .limit(limit)
            .select('-content');
    }

    // L·∫•y tin t·ª©c n·ªïi b·∫≠t
    async getFeaturedNews(limit = 10) {
        return await Article.find({ 
            isFeatured: true,
            isActive: true 
        })
        .sort({ publishedAt: -1 })
        .limit(limit)
        .select('-content');
    }

    // L·∫•y tin t·ª©c ph·ªï bi·∫øn (nhi·ªÅu view nh·∫•t)
    async getPopularNews(limit = 10) {
        return await Article.find({ isActive: true })
            .sort({ views: -1, publishedAt: -1 })
            .limit(limit)
            .select('-content');
    }

    // T√¨m ki·∫øm tin t·ª©c
    async searchNews(query, page = 1, limit = 20) {
        const skip = (page - 1) * limit;
        
        const searchRegex = new RegExp(query, 'i');
        const filter = {
            isActive: true,
            $or: [
                { title: searchRegex },
                { description: searchRegex },
                { tags: { $in: [searchRegex] } }
            ]
        };

        const articles = await Article.find(filter)
            .sort({ publishedAt: -1 })
            .skip(skip)
            .limit(limit)
            .select('-content');

        const total = await Article.countDocuments(filter);

        return {
            articles,
            total,
            page,
            totalPages: Math.ceil(total / limit),
            hasNext: page * limit < total,
            hasPrev: page > 1,
            query
        };
    }

    // L·∫•y b√†i vi·∫øt ƒë·∫ßy ƒë·ªß theo ID
    async getArticleById(id) {
        const article = await Article.findById(id);
        if (article) {
            // TƒÉng s·ªë l∆∞·ª£t xem
            await Article.findByIdAndUpdate(id, { $inc: { views: 1 } });
        }
        return article;
    }

    // L·∫•y b√†i vi·∫øt li√™n quan
    async getRelatedArticles(articleId, limit = 5) {
        const article = await Article.findById(articleId);
        if (!article) return [];

        return await Article.find({
            _id: { $ne: articleId },
            $or: [
                { category: article.category },
                { tags: { $in: article.tags } },
                { source: article.source }
            ],
            isActive: true
        })
        .sort({ publishedAt: -1 })
        .limit(limit)
        .select('-content');
    }

    // L·∫•y th·ªëng k√™ tin t·ª©c
    async getNewsStatistics() {
        const total = await Article.countDocuments({ isActive: true });
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const todayCount = await Article.countDocuments({
            isActive: true,
            createdAt: { $gte: today }
        });

        const categoryStats = await Article.aggregate([
            { $match: { isActive: true } },
            { $group: { _id: '$category', count: { $sum: 1 } } },
            { $sort: { count: -1 } }
        ]);

        const sourceStats = await Article.aggregate([
            { $match: { isActive: true } },
            { $group: { _id: '$source', count: { $sum: 1 } } },
            { $sort: { count: -1 } }
        ]);

        return {
            total,
            todayCount,
            categoryStats,
            sourceStats,
            rssStats: this.rssService.getStatistics()
        };
    }

    // ƒê·ªìng b·ªô tin theo danh m·ª•c c·ª• th·ªÉ
    async syncNewsByCategory(category) {
        try {
            console.log(`üîÑ ƒê·ªìng b·ªô tin t·ª©c danh m·ª•c: ${category}`);
            const categoryNews = await this.rssService.getFeedsByCategory(category, 100);
            
            let newCount = 0;
            for (const newsItem of categoryNews) {
                try {
                    const result = await this.saveArticle(newsItem);
                    if (result.isNew) newCount++;
                } catch (error) {
                    console.error(`‚ùå L·ªói khi l∆∞u b√†i tin ${category}:`, error.message);
                }
            }

            console.log(`‚úÖ ƒê·ªìng b·ªô ${category}: ${newCount} b√†i m·ªõi`);
            return newCount;
            
        } catch (error) {
            console.error(`‚ùå L·ªói khi ƒë·ªìng b·ªô danh m·ª•c ${category}:`, error);
            throw error;
        }
    }

    // L√†m s·∫°ch tin t·ª©c c≈© (x√≥a tin c≈© h∆°n 30 ng√†y)
    async cleanupOldNews(daysOld = 30) {
        try {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysOld);

            const result = await Article.deleteMany({
                publishedAt: { $lt: cutoffDate },
                views: { $lt: 10 }, // Ch·ªâ x√≥a tin √≠t ng∆∞·ªùi ƒë·ªçc
                likes: { $lt: 5 }
            });

            console.log(`üóëÔ∏è ƒê√£ x√≥a ${result.deletedCount} b√†i tin c≈© (>${daysOld} ng√†y)`);
            return result.deletedCount;

        } catch (error) {
            console.error('‚ùå L·ªói khi d·ªçn d·∫πp tin t·ª©c c≈©:', error);
            throw error;
        }
    }
}

module.exports = NewsService;
