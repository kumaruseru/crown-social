const NewsService = require('../services/NewsService');

class NewsController {
    constructor() {
        this.newsService = new NewsService();
        
        // Kh·ªüi ƒë·ªông News Service
        this.newsService.startNewsSync();
        
        console.log('üì∞ News Controller ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    // L·∫•y tin t·ª©c m·ªõi nh·∫•t
    async getLatestNews(req, res) {
        try {
            const limit = parseInt(req.query.limit) || 20;
            const articles = await this.newsService.getLatestNews(limit);
            
            res.json({
                success: true,
                data: articles,
                count: articles.length
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y tin m·ªõi nh·∫•t:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y tin t·ª©c m·ªõi nh·∫•t',
                error: error.message
            });
        }
    }

    // L·∫•y tin theo danh m·ª•c
    async getNewsByCategory(req, res) {
        try {
            const { category } = req.params;
            const page = parseInt(req.query.page) || 1;
            const limit = parseInt(req.query.limit) || 20;
            
            const result = await this.newsService.getNewsByCategory(category, page, limit);
            
            res.json({
                success: true,
                data: result.articles,
                pagination: {
                    page: result.page,
                    totalPages: result.totalPages,
                    total: result.total,
                    hasNext: result.hasNext,
                    hasPrev: result.hasPrev
                }
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y tin theo danh m·ª•c:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y tin t·ª©c theo danh m·ª•c',
                error: error.message
            });
        }
    }

    // L·∫•y tin n·ªïi b·∫≠t
    async getFeaturedNews(req, res) {
        try {
            const limit = parseInt(req.query.limit) || 10;
            const articles = await this.newsService.getFeaturedNews(limit);
            
            res.json({
                success: true,
                data: articles,
                count: articles.length
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y tin n·ªïi b·∫≠t:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y tin t·ª©c n·ªïi b·∫≠t',
                error: error.message
            });
        }
    }

    // L·∫•y tin ph·ªï bi·∫øn
    async getPopularNews(req, res) {
        try {
            const limit = parseInt(req.query.limit) || 10;
            const articles = await this.newsService.getPopularNews(limit);
            
            res.json({
                success: true,
                data: articles,
                count: articles.length
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y tin ph·ªï bi·∫øn:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y tin t·ª©c ph·ªï bi·∫øn',
                error: error.message
            });
        }
    }

    // T√¨m ki·∫øm tin t·ª©c
    async searchNews(req, res) {
        try {
            const { q: query } = req.query;
            const page = parseInt(req.query.page) || 1;
            const limit = parseInt(req.query.limit) || 20;
            
            if (!query) {
                return res.status(400).json({
                    success: false,
                    message: 'Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm'
                });
            }
            
            const result = await this.newsService.searchNews(query, page, limit);
            
            res.json({
                success: true,
                data: result.articles,
                pagination: {
                    page: result.page,
                    totalPages: result.totalPages,
                    total: result.total,
                    hasNext: result.hasNext,
                    hasPrev: result.hasPrev,
                    query: result.query
                }
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi t√¨m ki·∫øm tin t·ª©c:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi t√¨m ki·∫øm tin t·ª©c',
                error: error.message
            });
        }
    }

    // L·∫•y chi ti·∫øt b√†i vi·∫øt
    async getArticleDetails(req, res) {
        try {
            const { id } = req.params;
            const article = await this.newsService.getArticleById(id);
            
            if (!article) {
                return res.status(404).json({
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
                });
            }

            // L·∫•y b√†i vi·∫øt li√™n quan
            const relatedArticles = await this.newsService.getRelatedArticles(id, 5);
            
            res.json({
                success: true,
                data: {
                    article,
                    relatedArticles
                }
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt b√†i vi·∫øt:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y chi ti·∫øt b√†i vi·∫øt',
                error: error.message
            });
        }
    }

    // Like b√†i vi·∫øt
    async likeArticle(req, res) {
        try {
            const { id } = req.params;
            const userId = req.user ? req.user.id : null;
            
            if (!userId) {
                return res.status(401).json({
                    success: false,
                    message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y'
                });
            }

            const article = await this.newsService.getArticleById(id);
            if (!article) {
                return res.status(404).json({
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
                });
            }

            await article.toggleLike(userId);
            
            res.json({
                success: true,
                message: 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i like',
                data: {
                    likes: article.likes,
                    isLiked: article.likedBy.includes(userId)
                }
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi like b√†i vi·∫øt:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi c·∫≠p nh·∫≠t like',
                error: error.message
            });
        }
    }

    // Th√™m comment
    async addComment(req, res) {
        try {
            const { id } = req.params;
            const { content } = req.body;
            const userId = req.user ? req.user.id : null;
            
            if (!userId) {
                return res.status(401).json({
                    success: false,
                    message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n'
                });
            }

            if (!content || content.trim().length === 0) {
                return res.status(400).json({
                    success: false,
                    message: 'N·ªôi dung b√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                });
            }

            const article = await this.newsService.getArticleById(id);
            if (!article) {
                return res.status(404).json({
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
                });
            }

            await article.addComment(userId, content.trim());
            
            res.json({
                success: true,
                message: 'ƒê√£ th√™m b√¨nh lu·∫≠n th√†nh c√¥ng',
                data: {
                    commentCount: article.commentCount
                }
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi th√™m comment:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi th√™m b√¨nh lu·∫≠n',
                error: error.message
            });
        }
    }

    // Share b√†i vi·∫øt
    async shareArticle(req, res) {
        try {
            const { id } = req.params;
            const { platform } = req.body;
            const userId = req.user ? req.user.id : null;
            
            if (!userId) {
                return res.status(401).json({
                    success: false,
                    message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y'
                });
            }

            const article = await this.newsService.getArticleById(id);
            if (!article) {
                return res.status(404).json({
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
                });
            }

            await article.addShare(userId, platform || 'copy_link');
            
            res.json({
                success: true,
                message: 'ƒê√£ ghi nh·∫≠n chia s·∫ª',
                data: {
                    shares: article.shares
                }
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi share b√†i vi·∫øt:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi chia s·∫ª b√†i vi·∫øt',
                error: error.message
            });
        }
    }

    // L·∫•y th·ªëng k√™ tin t·ª©c
    async getNewsStatistics(req, res) {
        try {
            const stats = await this.newsService.getNewsStatistics();
            
            res.json({
                success: true,
                data: stats
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y th·ªëng k√™ tin t·ª©c',
                error: error.message
            });
        }
    }

    // ƒê·ªìng b·ªô tin t·ª©c th·ªß c√¥ng
    async syncNews(req, res) {
        try {
            const { category } = req.body;
            
            if (category) {
                const newCount = await this.newsService.syncNewsByCategory(category);
                res.json({
                    success: true,
                    message: `ƒê√£ ƒë·ªìng b·ªô ${newCount} b√†i tin m·ªõi cho danh m·ª•c ${category}`
                });
            } else {
                // Trigger ƒë·ªìng b·ªô t·∫•t c·∫£ (async)
                this.newsService.syncAllNews();
                res.json({
                    success: true,
                    message: 'ƒê√£ b·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô t·∫•t c·∫£ tin t·ª©c'
                });
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô tin t·ª©c:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi ƒë·ªìng b·ªô tin t·ª©c',
                error: error.message
            });
        }
    }

    // Danh s√°ch danh m·ª•c c√≥ s·∫µn
    async getCategories(req, res) {
        try {
            const categories = [
                { id: 'latest', name: 'M·ªõi nh·∫•t', icon: 'üÜï' },
                { id: 'politics', name: 'Th·ªùi s·ª±', icon: 'üèõÔ∏è' },
                { id: 'world', name: 'Th·∫ø gi·ªõi', icon: 'üåç' },
                { id: 'business', name: 'Kinh doanh', icon: 'üíº' },
                { id: 'technology', name: 'C√¥ng ngh·ªá', icon: 'üíª' },
                { id: 'sports', name: 'Th·ªÉ thao', icon: '‚öΩ' },
                { id: 'entertainment', name: 'Gi·∫£i tr√≠', icon: 'üé≠' },
                { id: 'health', name: 'S·ª©c kh·ªèe', icon: 'üè•' },
                { id: 'education', name: 'Gi√°o d·ª•c', icon: 'üìö' },
                { id: 'travel', name: 'Du l·ªãch', icon: '‚úàÔ∏è' },
                { id: 'culture', name: 'VƒÉn h√≥a', icon: 'üé®' },
                { id: 'law', name: 'Ph√°p lu·∫≠t', icon: '‚öñÔ∏è' },
                { id: 'science', name: 'Khoa h·ªçc', icon: 'üî¨' },
                { id: 'music', name: '√Çm nh·∫°c', icon: 'üéµ' },
                { id: 'movie', name: 'Phim ·∫£nh', icon: 'üé¨' },
                { id: 'fashion', name: 'Th·ªùi trang', icon: 'üëó' },
                { id: 'lifestyle', name: 'S·ªëng tr·∫ª', icon: 'üåü' },
                { id: 'auto', name: '√î t√¥ - Xe m√°y', icon: 'üöó' },
                { id: 'publishing', name: 'Xu·∫•t b·∫£n', icon: 'üìñ' },
                { id: 'factcheck', name: 'Gi·∫£ - Th·∫≠t', icon: 'üîç' },
                { id: 'relaxation', name: 'Th∆∞ gi√£n', icon: 'üòå' },
                { id: 'reader', name: 'B·∫°n ƒë·ªçc', icon: 'üë•' },
                { id: 'video', name: 'Video', icon: 'üé•' },
                { id: 'realestate', name: 'Nh√† ƒë·∫•t', icon: 'üè†' },
                { id: 'society', name: 'X√£ h·ªôi', icon: 'üë•' },
                { id: 'profile', name: 'H·ªì s∆°', icon: 'üìÑ' },
                { id: 'military', name: 'Qu√¢n s·ª±', icon: '‚öîÔ∏è' },
                { id: 'islands', name: 'Bi·ªÉn ƒë·∫£o', icon: 'üèùÔ∏è' },
                { id: 'local', name: 'ƒê·ªãa ph∆∞∆°ng', icon: 'üåÜ' },
                { id: 'perspective', name: 'G√≥c nh√¨n', icon: 'üëÅÔ∏è' },
                { id: 'photo', name: '·∫¢nh', icon: 'üì∏' },
                { id: 'infographics', name: 'Infographics', icon: 'üìä' },
                { id: 'special', name: 'ƒê·∫∑c bi·ªát', icon: '‚≠ê' },
                { id: 'ethnic', name: 'D√¢n t·ªôc mi·ªÅn n√∫i', icon: 'üèîÔ∏è' },
                { id: 'photo360', name: '·∫¢nh 360', icon: 'üåê' }
            ];

            res.json({
                success: true,
                data: categories
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y danh m·ª•c:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y danh s√°ch danh m·ª•c',
                error: error.message
            });
        }
    }

    // Tin trending
    async getTrendingNews(req, res) {
        try {
            const limit = parseInt(req.query.limit) || 10;
            const Article = require('../models/Article');
            const articles = await Article.getTrending(limit);
            
            res.json({
                success: true,
                data: articles,
                count: articles.length
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y tin trending:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y tin t·ª©c trending',
                error: error.message
            });
        }
    }

    // Tin n√≥ng (breaking news)
    async getBreakingNews(req, res) {
        try {
            const limit = parseInt(req.query.limit) || 5;
            const Article = require('../models/Article');
            const articles = await Article.getBreakingNews(limit);
            
            res.json({
                success: true,
                data: articles,
                count: articles.length
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y tin n√≥ng:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói khi l·∫•y tin t·ª©c n√≥ng',
                error: error.message
            });
        }
    }
}

module.exports = NewsController;
